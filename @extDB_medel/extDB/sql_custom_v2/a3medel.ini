[Default]
Version = 12

Number of Inputs = 0

;;Sanitize Checks are better than Strip Characters, but only accept ASCII Characters
;;Requires abit more work to setup correctly.
Sanitize Input Value Check = false
Sanitize Output Value Check = false

;;Allows you to disable Prepared Statement Caching.
;;Mainly for people that don't want to waste memory on caching a Statement that is only once.
Prepared Statement Cache = true

;;Returns InsertID, Instead of returning [1,[]] It returns [1,[]]
Return InsertID = false

;;Strip Characters
Strip = true
;;Possible Actions Are "Strip" / "Strip+Log" / "Strip+Error" / "None"
Strip Chars Action = STRIP+Log
Strip Chars = /\|;{}<>'`
;;Strip Chars Used for $CUSTOM_x$ Inputs
Strip Custom Chars = /\|;{}<>'`

; --------------------------------------------------------------------------------
; POP SQL STATEMENTS
; --------------------------------------------------------------------------------

;; ----------- init.sqf ------------------- START
[resetLifeVehicles]
SQL1_1 = CALL resetLifeVehicles();

[deleteDeadVehicles]
SQL1_1 = CALL deleteDeadVehicles();

[deleteOldHouses]
SQL1_1 = CALL deleteOldHouses();

[deleteOldGangs]
SQL1_1 = CALL deleteOldGangs();

;; ----------------------------------------------------------------------------- END


;; ----------- fn_initHouses.sqf ------------------- START
[CountHouses]
SQL1_1 = SELECT COUNT(*) FROM houses WHERE owned='1';
Number of Inputs = 0

[GetHousesPlayers]
SQL1_1 = SELECT houses.id, houses.pid, houses.pos, players.name FROM houses INNER JOIN players ON houses.pid=players.playerid WHERE houses.owned='1' LIMIT ?,10;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1, 2-String, 3-String, 4-String

;; ----------------------------------------------------------------------------- END


;; ----------- fn_insertRequest.sqf ------------------- START
[GetPlayerIDName]
SQL1_1 = SELECT playerid, name FROM players WHERE playerid=?;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String

[InsertEmptyPlayer]
SQL1_1 = INSERT INTO players (playerid, name, cash, bankacc, aliases, cop_licenses, med_licenses, civ_licenses, civ_gear, cop_gear, med_gear, experiencia, op_gear, op_licenses, arrestreason)
SQL1_2 =  VALUES(?, ?, ?, ?, ?, '"[]"', '"[]"', '"[]"', '"[]"', '"[]"', '"[]"', '"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"', '"[]"', '"[]"', '""');
SQL1_INPUTS = 1, 2, 3, 4, 5
Number of Inputs = 5

;; ----------------------------------------------------------------------------- END


;; ----------- fn_queryRequest.sqf ------------------- START
[GetWestPlayer]
SQL1_1 = SELECT playerid, name, cash, bankacc, adminlevel, donatorlvl, cop_licenses, coplevel, cop_gear, experiencia FROM players WHERE playerid=?;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String, 3, 4, 5-String, 6-String, 7-String, 8-string, 9-String, 10-String

[GetCivilianPlayer]
SQL1_1 = SELECT playerid, name, cash, bankacc, adminlevel, donatorlvl, civ_licenses, arrested, civ_gear, experiencia , jailtime, arrestreason, mafialvl, terrolvl, coplevel FROM players WHERE playerid=?;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String, 3, 4, 5-String, 6-String, 7-String, 8, 9-String, 10-String, 11, 12-String, 13-String, 14-String, 15-String

[GetIndependentPlayer]
SQL1_1 = SELECT playerid, name, cash, bankacc, adminlevel, donatorlvl, med_licenses, mediclevel, med_gear, experiencia FROM players WHERE playerid=?;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String, 3, 4, 5-String, 6-String, 7-String, 8-string, 9-String, 10-String

[GetEastPlayer]
SQL1_1 = SELECT playerid, name, cash, bankacc, adminlevel, donatorlvl, op_licenses, oplevel, op_gear, experiencia FROM players WHERE playerid=?;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String, 3, 4, 5-String, 6-String, 7-String, 8-string, 9-String, 10-String

;; ----------------------------------------------------------------------------- END


;; ----------- fn_updateRequest.sqf ------------------- START
[UpdateRequestWest]
SQL1_1 = UPDATE players SET name=?, cash=?, bankacc=?, cop_gear=?, cop_licenses=?, experiencia=? WHERE playerid=?;
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7
Number of Inputs = 7

[UpdateRequestCivilian]
SQL1_1 = UPDATE players SET name=?, cash=?, bankacc=?, civ_licenses=?, civ_gear=?, experiencia=?, arrested=?  WHERE playerid=?;
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8
Number of Inputs = 8

[UpdateRequestIndependent]
SQL1_1 = UPDATE players SET name=?, cash=?, bankacc=?, med_licenses=?, med_gear=?, experiencia=? WHERE playerid=?;
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7
Number of Inputs = 7

[UpdateRequestEast]
SQL1_1 = UPDATE players SET name=?, cash=?, bankacc=?, op_gear=?, op_licenses=?, experiencia=? WHERE playerid=?;
SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7
Number of Inputs = 7
;; ----------------------------------------------------------------------------- END


;; ----------- fn_houseCleanup.sqf, fn_fetchPlayerHouses.sqf ------------------- START
[GetPlayerHouses]
SQL1_1 = SELECT pid, pos, containers FROM houses WHERE pid=? AND owned='1';
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1-String, 2-String, 3-String
;; ----------------------------------------------------------------------------- END


;; ----------- fn_queryPlayerGang.sqf ------------------- START
[GetPlayerGang]
SQL1_1 = SELECT id, owner, name, maxmembers, bank, members FROM gangs WHERE active='1' AND members LIKE ?;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1, 2-String, 3-String, 4, 5, 6-String
;; ----------------------------------------------------------------------------- END


;; ----------- fn_insertGang.sqf ------------------- START
[GetIdGangByName]
SQL1_1 = SELECT id FROM gangs WHERE name=? AND active='1';
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1

[GetIdGangByMembers]
SQL1_1 = SELECT id FROM gangs WHERE members LIKE ? AND active='1';
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1

[GetInactiveGangByName]
SQL1_1 = SELECT id, active FROM gangs WHERE name=? AND active='0';
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1, 2

[SetGangActiveById]
SQL1_1 = UPDATE gangs SET active='1', owner=?,members=? WHERE id=?;
SQL1_INPUTS = 1, 2, 3
Number of Inputs = 3

[InsertNewGang]
SQL1_1 = INSERT INTO gangs (owner, name, members) VALUES(?,?,?);
SQL1_INPUTS = 1, 2, 3
Number of Inputs = 3

[GetIdActiveGangByOwner]
SQL1_1 = SELECT id FROM gangs WHERE owner=? AND active='1';
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1
;; ----------------------------------------------------------------------------- END

;; ----------- fn_updateWanted.sqf ------------------- Rosen --- START
[GuardarDelitos]
SQL1_1 = UPDATE wanted SET list=?;
SQL1_INPUTS = 1-String
Number of Inputs = 1
;; ----------------------------------------------------------------------------- END

;; ----------- fn_initWanted.sqf ------------------- Rosen --- START
[SacarDelitos]
SQL1_1 = SELECT list from wanted;
Number of Inputs = 0
OUTPUT = 1-String
;; ----------------------------------------------------------------------------- END

;; ----------- fn_inscripcion.sqf ------------------- Rosen --- START
[Inscribirse]
SQL1_1 = INSERT INTO politica (id,nombre)
SQL1_2 = VALUES (?,?);
SQL1_INPUTS = 1, 2-String
Number of Inputs = 2
;; ----------------------------------------------------------------------------- END

;; ----------- fn_listaCandidatos.sqf ------------------- Rosen --- START
[ListarCandidatos]
SQL1_1 = SELECT nombre FROM politica;
Number of Inputs = 0
OUTPUT = 1-String
;; ----------------------------------------------------------------------------- END

;; ----------- fn_votar.sqf ------------------- Rosen --- START
[Votar]
SQL1_1 = UPDATE politica SET votos = votos + 1 WHERE nombre =?;
SQL1_INPUTS = 1-String
Number of Inputs = 1
;; ----------------------------------------------------------------------------- END

;; ----------- fn_votar.sqf ------------------- Rosen --- START
[ListarVotantes]
SQL1_1 = SELECT votantes FROM politicados;
Number of Inputs = 0
OUTPUT = 1-String
;; ----------------------------------------------------------------------------- END

;; ----------- fn_votar.sqf ------------------- Rosen --- START
[UpdateVotantes]
SQL1_1 = INSERT INTO politicados (votantes,candidato)
SQL1_2 = VALUES (?,?);
SQL1_INPUTS = 1,2-String
Number of Inputs = 2
;; ----------------------------------------------------------------------------- END


;; ----------- fn_resultados.sqf ------------------- Rosen --- START
[Reiniciar]
SQL1_1 = DELETE FROM politica;
Number of Inputs = 0
;; ----------------------------------------------------------------------------- END

;; ----------- fn_resultados.sqf ------------------- Rosen --- START
[ReiniciarV]
SQL1_1 = DELETE FROM politicados;
Number of Inputs = 0
;; ----------------------------------------------------------------------------- END

;; ----------- fn_removeGang.sqf ------------------- START
[SetGangInactiveById]
SQL1_1 = UPDATE gangs SET active='0' WHERE id=?;
SQL1_INPUTS = 1
Number of Inputs = 1

[GetIdActiveGangById]
SQL1_1 = SELECT id FROM gangs WHERE active='1' AND id=?;
SQL1_INPUTS = 1
Number of Inputs = 1
OUTPUT = 1
;; ----------------------------------------------------------------------------- END


;; ----------- fn_addHouse.sqf ------------------- START
[HousingInsertNueva]
SQL1_1 = INSERT INTO houses (pid, pos, inventory, containers, owned)
SQL1_2 = 	VALUES(?,?,?,?,?);
SQL1_INPUTS = 1, 2, 3, 4, 5
SQL2_1 = SELECT id FROM houses WHERE pos=? AND pid=? AND owned='1';
SQL2_INPUTS = 2, 1

Number of Inputs = 5
OUTPUT = 1

;; ----------------------------------------------------------------------------- END

;; ----------- fn_getVehicles.sqf ------------------- START
[GetPlayerVehiclesList]
SQL1_1 = SELECT id, side, classname, type, pid, alive, active, plate, color
SQL1_2 = 	FROM vehicles WHERE pid=? AND alive=1 AND active = 0 AND side=? AND type=?;
SQL1_INPUTS = 1, 2, 3
Number of Inputs = 3

OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6, 7, 8, 9
;; ----------------------------------------------------------------------------- END


;; ----------- fn_spawnVehicle.sqf ------------------- START
[GetPlayerVehicleSpawn]
SQL1_1 = SELECT id, side, classname, type, pid, alive, active, plate, color, fuel
SQL1_2 = 	FROM vehicles WHERE id=? AND pid=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

OUTPUT = 1, 2-String, 3-String, 4-String, 5-String, 6, 7, 8, 9, 10-String

[SetSpawnVehicleActive]
SQL1_1 = UPDATE vehicles SET active=? WHERE pid=? AND id=?;

SQL1_INPUTS = 1, 2, 3
Number of Inputs = 3
;; ----------------------------------------------------------------------------- END


;; ----------- fn_insertVehicle.sqf ------------------- START
[InsertNewVehicle]
SQL1_1 = INSERT INTO vehicles
;;						1      2          3     4    5      6       7          8
SQL1_2 = 				(side, classname, type, pid, alive, active, color, plate)
SQL1_3 = 				VALUES (?,?,?,?,?,?,?,?);

SQL1_INPUTS = 1, 2, 3, 4, 5, 6, 7, 8
Number of Inputs = 8
;; ----------------------------------------------------------------------------- END


;; ----------- fn_jailsystem.sqf ------------------- START
[SetJailtimeArrestreasonPlayer]
SQL1_1 = UPDATE players SET jailtime=?, arrestreason=? WHERE playerid=?;
SQL1_INPUTS = 1, 2, 3
Number of Inputs = 3

[SetJailtimePlayer]
SQL1_1 = UPDATE players SET jailtime=? WHERE playerid=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2
;; ----------------------------------------------------------------------------- END


;; ----------- cleanup.fsm, fn_chopShopSell.sqf ------------------- START
[SetAliveInsureVehicleByPidPlate]
SQL1_1 = UPDATE vehicles SET alive='1', insure='0', active='0' WHERE pid=? AND plate=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetAliveVehicleByPidPlate]
SQL1_1 = UPDATE vehicles SET alive=? WHERE pid=? AND plate=?;

SQL1_INPUTS = 1, 2, 3
Number of Inputs = 3
;; ----------------------------------------------------------------------------- END


;; ----------- fn_updateGang.sqf ------------------- START
[SetBankMaxmembersOwnerGangById]
SQL1_1 = UPDATE gangs SET bank=?, maxmembers=?, owner=? WHERE id=?;
SQL1_INPUTS = 1, 2, 3, 4
Number of Inputs = 4

[SetBankGangById]
SQL1_1 = UPDATE gangs SET bank=? WHERE id=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetMaxmembersGangById]
SQL1_1 = UPDATE gangs SET maxmembers=? WHERE id=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetOwnerGangById]
SQL1_1 = UPDATE gangs SET owner=? WHERE id=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetMembersGangById]
SQL1_1 = UPDATE gangs SET members=? WHERE id=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2
;; ----------------------------------------------------------------------------- END


;; ----------- fn_sellHouse.sqf ------------------- START
[SetOwnedPosHouseByPidPos]
SQL1_1 = UPDATE houses SET owned='0', pos='[]' WHERE pid=? AND pos=? AND owned='1';
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetOwnedPosHouseById]
SQL1_1 = UPDATE houses SET owned='0', pos='[]' WHERE id=?;
SQL1_INPUTS = 1
Number of Inputs = 1
;; ----------------------------------------------------------------------------- END


;; ----------- fn_updateHouseContainers.sqf ------------------- START
[SetContainersHouseById]
SQL1_1 = UPDATE houses SET containers=? WHERE id=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2
;; ----------------------------------------------------------------------------- END


;; ----------- fn_updateHouseTrunk.sqf ------------------- START
[SetInventoryHouseById]
SQL1_1 = UPDATE houses SET inventory=? WHERE id=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2
;; ----------------------------------------------------------------------------- END


;; ----------- fn_cleanup.sqf, fn_vehicleStore.sqf ------------------- START
[SetActiveVehicleByPidPlate]
SQL1_1 = UPDATE vehicles SET active='0', fuel=? WHERE pid=? AND plate=?;
SQL1_INPUTS = 1-String, 2, 3
Number of Inputs = 3
;; ----------------------------------------------------------------------------- END


;; ----------- fn_vehicleDelete.sqf ------------------- START
[SetAliveVehicleByPidId]
SQL1_1 = UPDATE vehicles SET alive=? WHERE pid=? AND id=?;

SQL1_INPUTS = 1, 2, 3
Number of Inputs = 3
;; ----------------------------------------------------------------------------- END


;; ----------- fn_updatePartial.sqf ------------------- START
[SetCashPlayerByPlayerid]
SQL1_1 = UPDATE players SET cash=? WHERE playerid=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetBankaccPlayerByPlayerid]
SQL1_1 = UPDATE players SET bankacc=? WHERE playerid=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetCoplicensesPlayerByPlayerid]
SQL1_1 = UPDATE players SET cop_licenses=? WHERE playerid=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetCivlicensesPlayerByPlayerid]
SQL1_1 = UPDATE players SET civ_licenses=? WHERE playerid=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetMedlicensesPlayerByPlayerid]
SQL1_1 = UPDATE players SET med_licenses=? WHERE playerid=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetCopgearPlayerByPlayerid]
SQL1_1 = UPDATE players SET cop_gear=? WHERE playerid=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetCivgearPlayerByPlayerid]
SQL1_1 = UPDATE players SET civ_gear=? WHERE playerid=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetMedgearPlayerByPlayerid]
SQL1_1 = UPDATE players SET med_gear=? WHERE playerid=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetArrestedPlayerByPlayerid]
SQL1_1 = UPDATE players SET arrested=? WHERE playerid=?;
SQL1_INPUTS = 1, 2
Number of Inputs = 2

[SetCashBankaccPlayerByPlayerid]
SQL1_1 = UPDATE players SET cash=?, bankacc=? WHERE playerid=?;
SQL1_INPUTS = 1, 2, 3
Number of Inputs = 3

[SetExperienciaPlayerByPlayerid]
SQL1_1 = UPDATE players SET experiencia=? WHERE playerid=?;
SQL1_INPUTS = 1, 2-String
Number of Inputs = 2
;; ----------------------------------------------------------------------------- END

;; ----------- MARKET ------------------- START
[GetMarketPrices]
SQL1_1 = SELECT prices FROM market WHERE id=1;
OUTPUT = 1

[SetMarketPrices]
SQL1_1 = UPDATE market SET prices=? WHERE id=1;
SQL1_INPUTS = 1
Number of Inputs = 1
;; ----------------------------------------------------------------------------- END
; --------------------------------------------------------------------------------
; SQL Statements - EJEMPLOS ORIGINALES
; --------------------------------------------------------------------------------

[existPlayerInfo]
;; Name of call == existPlayerInfo
SQL1_1 = SELECT CASE
SQL1_2 =    WHEN EXISTS(SELECT * FROM PlayerInfo WHERE UID = ?)
SQL1_3 =           THEN 'true' ELSE 'false'
SQL1_4 = END
SQL1_INPUTS = 1

Number of Inputs = 1

;;SQL Statements can be split up into multiple lines to make more readable.
;; You can also run multiple SQL Statements via SQL2_1, SQL2_2, SQL3_1 etc..


[updatePlayerSaveValueString]
SQL1_1 = UPDATE PlayerSave
SQL1_2 =    SET $CUSTOM_1$ = ?
SQL1_3 = WHERE PlayerUID = ? AND MapID = ?;
SQL1_INPUTS = 3, 1, 2

Number of Inputs = 3
Number of Custom Inputs = 1

;;$CUSTOM_x$ allows you to insert dynamic text into an prepared statement.
;;Downside is the statement isn't cached + possible less secure.

;;Note the order of passing inputs to extDB2 is important with custom inputs.
;; Its <inputs>:<custom_inputs>
;; So the inputs would be in this order _playerUID:_mapID:_value:_custom_1

;;Also you can re-arrange the Input Value Order


[gangInfo]
SQL1_1 = SELECT id, owner, name, maxmembers, bank, members FROM gangs WHERE active='1' AND members LIKE ?;
SQL1_INPUTS = 1

Number of Inputs = 1
OUTPUT = 1, 2-String, 3-String, 4, 5, 6

;;You can also define options for Output Value aswell if you like aswell i.e 1-STRING-BEGUID
;;Or do mixture of using INPUTS + OUTPUT Options.
